# -*- coding: utf-8 -*-
"""Multi Armed Bandit for Greedy, Epsilon Greedy and Optimal Greedy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RKs6WlkQ5mxv17PaocaYZ7-wFXjTmDK0
"""





class Product:
    def __init__(self, name, price, demand):
        self.name = name
        self.price = price
        self.demand = demand

    def get_profit(self):
        return self.price * self.demand


class ECommerceWebsite:
    def __init__(self, products):
        self.products = products

    def get_total_profit(self):
        total_profit = 0
        for product in self.products:
            total_profit += product.get_profit()
        return total_profit

    def optimal_greedy_price_optimization(self):
        # Create a model of the environment and implement predict_reward() and state representation.
        model = YourCustomModel()

        # Create an agent.
        agent = OptimalGreedyAgent(model)

        # Perform optimal greedy price optimization.
        agent.optimal_greedy_price_optimization(self)


class YourCustomModel:
    pass


class OptimalGreedyAgent:
    def __init__(self, model):
        self.model = model

    def optimal_greedy_price_optimization(self, e_commerce_website):
        # Implement the optimal greedy price optimization algorithm.
        pass


products = [
    Product("Brand A", 100, 10),
    Product("Brand B", 200, 5),
    Product("Brand C", 300, 3),
]

e_commerce_website = ECommerceWebsite(products)

# Perform optimal greedy price optimization.
e_commerce_website.optimal_greedy_price_optimization()

# Print the total profit after price optimization.
print("Total profit after price optimization:", e_commerce_website.get_total_profit())

import numpy as np

class Product:
    def __init__(self, brand, demand, price):
        self.brand = brand
        self.demand = demand
        self.price = price

        self.mean_demand = 0
        self.num_sales = 0
        self.ucb = 0

    def get_profit(self):
        return self.demand * self.price

class HybridAgent:
    def __init__(self, epsilon):
        self.epsilon = epsilon
        self.thompson_agent = ThompsonSamplingAgent()
        self.epsilon_greedy_agent = EpsilonGreedyAgent(epsilon)

    def choose_action(self, products):
        if np.random.rand() < self.epsilon:
            return self.epsilon_greedy_agent.choose_action(products)
        else:
            return self.thompson_agent.choose_action(products)

class ThompsonSamplingAgent:
    def choose_action(self, products):
        sampled_demands = []

        for product in products:
            # For simplicity, assume a normal distribution around the current mean demand.
            sampled_demand = np.random.normal(product.mean_demand, 1)
            sampled_demands.append(sampled_demand)

        # Choose the product with the highest sampled demand.
        product = max(zip(products, sampled_demands), key=lambda x: x[1])[0]
        new_price = product.price + 1
        return product, new_price

class EpsilonGreedyAgent:
    def __init__(self, epsilon):
        self.epsilon = epsilon

    def choose_action(self, products):
        if np.random.rand() < self.epsilon:
            # Randomly choose a product and update its price
            product = np.random.choice(products)
            new_price = product.price + np.random.choice([-1, 1])
            return product, new_price
        else:
            # Choose the product with the highest current price
            product = max(products, key=lambda x: x.price)
            new_price = product.price + 1
            return product, new_price

class ECommerceWebsite:
    def __init__(self, products):
        self.products = products

    def get_total_profit(self):
        total_profit = 0
        for product in self.products:
            total_profit += product.get_profit()
        return total_profit

    def hybrid_price_optimization(self, epsilon):
        agent = HybridAgent(epsilon)

        # Choose an action.
        product, new_price = agent.choose_action(self.products)

        # Update the prices.
        product.price = new_price

        # Update the demand information for the chosen product.
        product.num_sales += 1
        product.mean_demand = (product.mean_demand * product.num_sales + product.demand) / (product.num_sales + 1)

if __name__ == "__main__":
    # Create a list of products.
    products = [
        Product("Brand A", 100, 10),
        Product("Brand B", 200, 5),
        Product("Brand C", 300, 3)
    ]

    # Create an e-commerce website.
    e_commerce_website = ECommerceWebsite(products)

    # Print the total profit before price optimization.
    print("Total profit before price optimization:", e_commerce_website.get_total_profit())

    # Set the epsilon parameter.
    epsilon = 0.1

    # Perform hybrid price optimization.
    e_commerce_website.hybrid_price_optimization(epsilon)

    # Print the total profit after price optimization.
    print("Total profit after price optimization:", e_commerce_website.get_total_profit())

import numpy as np

class Product:
    def __init__(self, brand, demand, price):
    self.brand = brand
    self.demand = demand
    self.price = price

    def get_profit(self):
    return self.demand * self.price

class ECommerceWebsite:
    def __init__(self, products):
       self.products = products

    def get_total_profit(self):
         total_profit = 0
    for product in self.products:
        total_profit += product.get_profit()
        return total_profit

    def greedy_price_optimization(self):
        for product in self.products:
      # Increase the price of the product if it will lead to a higher profit.
           if product.demand * (product.price + 1) > product.get_profit():
              product.price += 1

if __name__ == "__main__":
  # Create a list of products.
  products = [
    Product("Brand A", 100, 10),
    Product("Brand B", 200, 5),
    Product("Brand C", 300, 3)
  ]

  # Create an e-commerce website.
  e_commerce_website = ECommerceWebsite(products)

  # Print the total profit before price optimization.
  print("Total profit before price optimization:", e_commerce_website.get_total_profit())

  # Perform greedy price optimization.
  e_commerce_website.greedy_price_optimization()

  # Print the total profit after price optimization.
  print("Total profit after price optimization:", e_commerce_website.get_total_profit())

import numpy as np

class Product:
    def __init__(self, brand, demand, price):
        self.brand = brand
        self.demand = demand
        self.price = price

        self.mean_demand = 0
        self.num_sales = 0
        self.ucb = 0

    def get_profit(self):
        return self.demand * self.price

class GreedyAgent:
    def choose_action(self, products):
        # Choose the product with the highest current profit.
        product = max(products, key=lambda x: x.get_profit())
        new_price = product.price + 1
        return product, new_price

class ECommerceWebsite:
    def __init__(self, products):
        self.products = products

    def get_total_profit(self):
        total_profit = 0
        for product in self.products:
            total_profit += product.get_profit()
        return total_profit

    def greedy_price_optimization(self):
        agent = GreedyAgent()

        # Choose an action.
        product, new_price = agent.choose_action(self.products)

        # Update the prices.
        product.price = new_price

        # Update the demand information for the chosen product.
        product.num_sales += 1
        product.mean_demand = (product.mean_demand * product.num_sales + product.demand) / (product.num_sales + 1)

    def get_total_sales(self):
        total_sales = 0
        for product in self.products:
            total_sales += product.num_sales
        return total_sales

if __name__ == "__main__":
    # Create a list of products.
    products = [
        Product("Brand A", 100, 10),
        Product("Brand B", 200, 5),
        Product("Brand C", 300, 3)
    ]

    # Create an e-commerce website.
    e_commerce_website = ECommerceWebsite(products)

    # Print the total profit before price optimization.
    print("Total profit before price optimization:", e_commerce_website.get_total_profit())

    # Perform greedy price optimization.
    e_commerce_website.greedy_price_optimization()

    # Print the total profit after price optimization.
    print("Total profit after price optimization:", e_commerce_website.get_total_profit())