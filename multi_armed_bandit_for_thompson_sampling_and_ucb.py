# -*- coding: utf-8 -*-
"""Multi Armed Bandit for Thompson Sampling and UCB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E1z_on74VNj4-1RW7ISwLKHU_UpwFpyN
"""

import numpy as np

class Product:
    def __init__(self, brand, demand, price):
        self.brand = brand
        self.demand = demand
        self.price = price

        self.mean_demand = 0
        self.num_sales = 0
        self.ucb = 0

    def get_profit(self):
        return self.demand * self.price

class ThompsonSamplingAgent:
    def choose_action(self, products):
        sampled_demands = []

        for product in products:
            # For simplicity, assume a normal distribution around the current mean demand.
            sampled_demand = np.random.normal(product.mean_demand, 1)
            sampled_demands.append(sampled_demand)

        # Choose the product with the highest sampled demand.
        product = max(zip(products, sampled_demands), key=lambda x: x[1])[0]
        new_price = product.price + 1
        return product, new_price

class ECommerceWebsite:
    def __init__(self, products):
        self.products = products

    def get_total_profit(self):
        total_profit = 0
        for product in self.products:
            total_profit += product.get_profit()
        return total_profit

    def thompson_sampling_price_optimization(self):
        agent = ThompsonSamplingAgent()

        # Choose an action.
        product, new_price = agent.choose_action(self.products)

        # Update the prices.
        product.price = new_price

        # Update the demand information for the chosen product.
        product.num_sales += 1
        product.mean_demand = (product.mean_demand * product.num_sales + product.demand) / (product.num_sales + 1)

    def get_total_sales(self):
        total_sales = 0
        for product in self.products:
            total_sales += product.num_sales
        return total_sales

if __name__ == "__main__":
    # Create a list of products.
    products = [
        Product("Brand A", 100, 10),
        Product("Brand B", 200, 5),
        Product("Brand C", 300, 3)
    ]

    # Create an e-commerce website.
    e_commerce_website = ECommerceWebsite(products)

    # Print the total profit before price optimization.
    print("Total profit before price optimization:", e_commerce_website.get_total_profit())

    # Perform Thompson Sampling price optimization.
    e_commerce_website.thompson_sampling_price_optimization()

    # Print the total profit after price optimization.
    print("Total profit after price optimization:", e_commerce_website.get_total_profit())

import numpy as np

class Product:
    def __init__(self, brand, demand, price):
        self.brand = brand
        self.demand = demand
        self.price = price

        self.mean_demand = 0
        self.num_sales = 0
        self.ucb = 0

    def get_profit(self):
        return self.demand * self.price

class ECommerceWebsite:
    def __init__(self, products):
        self.products = products

    def get_total_profit(self):
        total_profit = 0
        for product in self.products:
            total_profit += product.get_profit()
        return total_profit

    def ucb_price_optimization(self):
        for product in self.products:
            # Calculate the upper confidence bound (UCB) for the product.
            product.ucb = product.mean_demand + np.sqrt(2 * np.log(self.get_total_sales()) / product.num_sales)

            # Set the price to the maximum of the current price and the UCB.
            product.price = max(product.price, product.ucb)

    def get_total_sales(self):
        total_sales = 0
        for product in self.products:
            total_sales += product.num_sales
        return total_sales

if __name__ == "__main__":
    # Create a list of products.
    products = [
        Product("Brand A", 100, 10),
        Product("Brand B", 200, 5),
        Product("Brand C", 300, 3)
    ]

    # Create an e-commerce website.
    e_commerce_website = ECommerceWebsite(products)

    # Print the total profit before price optimization.
    print("Total profit before price optimization:", e_commerce_website.get_total_profit())

    # Perform UCB price optimization.
    e_commerce_website.ucb_price_optimization()

    # Print the total profit after price optimization.
    print("Total profit after price optimization:", e_commerce_website.get_total_profit())